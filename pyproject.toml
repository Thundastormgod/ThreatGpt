[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "threatgpt"
version = "0.1.0"
description = "AI-Powered Threat Simulation Platform for Cybersecurity Training"
authors = ["ThreatGPT Team <okino007@gmail.com>"]
license = "MIT"
readme = "README.md"
homepage = "https://github.com/threatgpt/threatgpt"
repository = "https://github.com/threatgpt/threatgpt"
documentation = "https://threatgpt.readthedocs.io"
keywords = ["cybersecurity", "threat-simulation", "ai", "llm", "red-team"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Information Technology",
    "Topic :: Security",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
packages = [{include = "threatgpt", from = "src"}]

[tool.poetry.scripts]
threatgpt = "threatgpt.cli.main:main"

[tool.poetry.dependencies]
python = "^3.11"
fastapi = "^0.104.0"
uvicorn = {extras = ["standard"], version = "^0.24.0"}
pydantic = "^2.5.0"
pydantic-settings = "^2.1.0"
pyyaml = "^6.0.1"
click = "^8.1.7"
rich = "^13.7.0"
openai = "^1.3.0"
anthropic = "^0.7.0"
asyncpg = "^0.29.0"
redis = "^5.0.1"
sqlalchemy = {extras = ["asyncio"], version = "^2.0.23"}
alembic = "^1.13.0"
httpx = "^0.25.2"
jinja2 = "^3.1.2"
structlog = "^23.2.0"
prometheus-client = "^0.19.0"
aiofiles = "^23.2.1"
python-multipart = "^0.0.6"
python-jose = {extras = ["cryptography"], version = "^3.3.0"}
passlib = {extras = ["bcrypt"], version = "^1.7.4"}
tenacity = "^8.2.3"

[tool.poetry.group.dev.dependencies]
pytest = "^7.4.0"
pytest-asyncio = "^0.21.0"
pytest-cov = "^4.1.0"
pytest-mock = "^3.12.0"
pytest-xdist = "^3.5.0"
black = "^23.11.0"
flake8 = "^6.1.0"
mypy = "^1.7.0"
pre-commit = "^3.6.0"
isort = "^5.13.0"
bandit = "^1.7.5"
safety = "^2.3.5"
coverage = "^7.3.2"
sphinx = "^7.2.6"
sphinx-rtd-theme = "^1.3.0"
mkdocs = "^1.5.3"
mkdocs-material = "^9.4.8"

[tool.poetry.group.test.dependencies]
factory-boy = "^3.3.0"
faker = "^20.1.0"
httpx = "^0.25.2"
respx = "^0.20.2"

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "anthropic.*",
    "openai.*",
    "redis.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "e2e: marks tests as end-to-end tests",
]

[tool.coverage.run]
source = ["src/threatgpt"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
    "*/migrations/*",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]

[tool.bandit]
exclude_dirs = ["tests", "build", "dist"]
skips = ["B101", "B601"]